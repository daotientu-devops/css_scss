$color-blue: red;
$bg-color: #f1f1f1;
section {
  background-color: $bg-color;
  h2 {
    color: $color-blue;
  }
}
/**
 * SCSS nesting: phân cấp css cha-con
 */
// SCSS nesting theo tag
section {
  width: 300px;
  h2 {
    font-size: 12px;
  }
  div {
    padding: 20px;
  }
}
#main {
  width: 300px;
  h2 {
    font-size: 12px;
  }
  .list {
    padding: 20px;
    li {
      background-color: #f1f1f1;
    }
  }
}
// SCSS nesting đại diện: Ký tự & sẽ đại diện cho thành phần cha bên ngoài gần nhất
.btn-submit {
  width: 100px;
  background-color: red;
  &:hover {
    background-color: blue;
  }
}
.list {
  margin-bottom: 20px;
  &.list-last {
    margin-bottom: 0;
  }
}
.list {
  li {
    float: left;
    margin-right: 10px;
    &:last-child {
      margin-right: 0;
    }
  }
}
/**
  * SCSS nesting thuộc tính
  * Các thuộc tính có tiền tố giống nhau có thể được gom chung với nhau
  * Một số thuộc tính có tiền tố giống nhau hay dùng: font-, margin-, padding-, text-, background-, border-
 */
section {
  width: 300px;
  font: {
    family: Arial, sans-serif;
    size: 16px;
  }
  h2 {
    font-size: 20px;
  }
  div {
    padding: 20px;
  }
}
/**
  * SCSS nesting @media
  * @media được sử dụng bên trong thành phần nào thì sẽ sử dụng cho thành phần đó
 */
#main {
  width: 300px;
  @media only screen and (min-width: 641px) {
    width: 200px;
  }
}
/**
  * SCSS @extend: kế thừa những thuộc tính của thành phần khác đã được khai báo trước đó, giúp giảm thời gian và trùng lặp code
 */
.box {
  background-color: #f1f1f1;
  border: 1px solid #CCC;
}
.section {
  @extend .box;
  padding: 20px;
}
/**
  * SCSS @mixin & @include
  * Khác với @exclude là kế thừa thuộc tính của thành phần có sẵn, tuy nhiên @mixin & @include cung cấp 1 giải pháp tốt hơn nhiều, đo là tạo một bộ các thuộc tính
  * và chèn nó vào bên trong các thành phần muốn sử dụng, quan trọng là @mixin & @include cung cấp đối số có thể tùy chỉnh trong từng thành phần được sử dụng
 */
// SCSS @mixin & @include không đối số
@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}
ul {
  @include reset-list;
  background-color: #f1f1f1;
  li {
    padding: 10px;
    border: 1px solid #CCC;
  }
}
// ==> Kết quả là thành phần ul đã sử dụng các thuộc tính được khai báo tại @mixin reset-list

// SCSS @mixin & @include có đối số là giá trị
@mixin center($w) {
  margin: 0 auto;
  width: $w;
}
.main {
  @include center(300px);
  padding: 20px;
}
.box {
  @include center(100px);
  background-color: #f1f1f1;
}
// ==> Cả 2 thành phần .main và .box đều đã sử dụng các thuộc tính được khai báo tại @mixin center, tuy nhiên với 2 đối số $w được truyền khác nhau

// SCSS @mixin & @include có đối số là thuộc tính
// #{$prop}
@mixin center($prop, $val) {
  margin: 0 auto;
  width: 300px;
  #{$prop}: $val;
}
.main {
  @include center(color, red);
  padding: 20px;
}
.box {
  @include center(font-size, 24px);
  background-color: #f1f1f1;
}
// Warning: cách khai báo cho thuộc tính #{$prop}
@mixin doMixi($prop, $val) {
  -webkit-#{$prop}: $val;
  -moz-#{$prop}: $val;
  -ms-#{$prop}: $val;
  #{$prop}: $val;
}
.main {
  @include doMixi(box-shadow, 3px 3px 2px blue);
  padding: 20px;
}
.box {
  @include doMixi(transform, rotate(90deg));
  background-color: #f1f1f1;
}
/**
  * SCSS placeholder
  * Cách sử dụng SCSS placeholder khá giống với @mixin, tuy nhiên các thành phần sử dụng placeholders sẽ được gom chung vào cùng 1 bộ các thuộc tính
 */
%reset-list {
  margin: 0;
  padding: 0;
  background: none;
}

ul {
  @extend %reset-list;
  background-color: #f1f1f1;
  li {
    padding: 10px;
    border: 1px solid #CCC;
  }
}
div {
  @extend %reset-list;
}
// Kết quả: thành phần ul và div được gom chung và sử dụng các thuộc tính khai báo tại %reset-list

// (**) Do tính chất gom sử dụng chung các thuộc tính nên placeholder không sử dụng được cho đối số
/**
  * SCSS @function
  * khá giống với @mixin, tuy nhiên thay vì biên dịch CSS như @mixin thì @function sẽ trả về giá trị, thuộc tính hoặc function thậm chí là 1 @mixin
 */
// Function tính chiều rộng các phần tử con
@function getWidth($widthWarp, $item) {
  @return $widthWarp / $item;
}
.list {
  width: 600px;
  li {
    float: left;
    width: getWidth(600px, 4);
  }
}
// Function tính chiều rộng các phần tử con theo phần trăm
@function columns($item) {
  @return 100% / $item;
}
.two-cols {
  width: columns(2);
}
.three-cols {
  width: columns(3);
}
.four-cols {
  width: columns(4);
}
.five-cols {
  width: columns(5);
}
/**
  * SCSS @if @else: thiết lập bộ template dùng chung cho nhiều vị trí
 */
// Xây dựng 1 @mixin của thuộc tính position sẽ xác định theo tên vị trí $pos và đưa ra giá trị trục $x, $y tương ứng
@mixin position($pos, $y, $x) {
  position: absolute;
  @if $pos == 'tl' {
    left: $x;
    top: $y;
  } @else if $pos == 'tr' {
    right: $x;
    top: $y;
  } @else if $pos == 'bl' {
    left: $x;
    bottom: $y;
  } @else if $pos == 'br' {
    right: $x;
    bottom: $y;
  }
}
#main {
  position: relative;
  .box01 {
    @include position('tl', 20px, 40px)
  }
  .box02 {
    @include position('bl', 50px, 30px)
  }
}
///////////////////////////////////////
// placeholder #{$pos}
@mixin bdr-position($pos, $radius) {
  border-radius: 0;
  @if $pos == 'top' {
    border-#{$pos}-left-radius: $radius;
    border-#{$pos}-right-radius: $radius;
  } @else if $pos == 'bottom' {
    border-#{$pos}-left-radius: $radius;
    border-#{$pos}-right-radius: $radius;
  } @else if $pos == 'right' {
    border-bottom-#{$pos}-radius: $radius;
    border-top-#{$pos}-radius: $radius;
  } @else if $pos == 'left' {
    border-bottom-#{$pos}-radius: $radius;
    border-top-#{$pos}-radius: $radius;
  }
}
#main {
  @include bdr-position(top, 4px)
}
/**
  * SCSS @for thường được dùng để tác động tới danh sách, với tính chất tăng dần
 */
// Tạo độ giảm dần opacity
$length: 5;
@for $i from 1 through $length {
  .item-#{$i} {
    opacity: 1/$i;
  }
}
// Tạo chiều rộng tự động theo số cột
$total-cols: 8;
@function column-width($col) {
  @return percentage($col/$total-cols);
}
@for $i from 1 through $total-cols {
  .col-#{$i} {width: column-width($i)};
}
// Sử dụng cho :nth-child
$base-color: #036;
@for $i from 1 through 3 {
  ul:nth-child(3n+#{$i}) {
    background-color: lighten($base-color, $i * 5%);
  }
}
/**
 * SCSS @while: sẽ lặp nội dung bên trong while trong khi vẫn còn thỏa mãn điều kiện ban đầu
 */
// Thực hiện lặp theo số lần từ 1 tới giá trị cho trước
$i: 4;
@while $i > 0 {
  .item-#{$i} {
    width: 800px/$i;
    $i: $i - 1;
  }
}
// Thực hiện lặp theo số lần từ giá trị bất kỳ
$i: 3;
@while $i < 5 {
  .item-#{$i} {
    color: red;
    $i: $i + 1;
  }
}
/**
 * SCSS @each: thiết lập một loạt các giá trị có cùng tính chất, đặc biệt là trong danh sách với các thuộc tính gần như là như nhau
 * Cách sử dụng gần giống với cấu trúc for each của PHP
 */
// each 1 giá trị
$sizes: 40px, 50px, 80px;
@each $size in $sizes {
  .icon-#{$size} {
    font-size: $size;
    height: $size;
    width: $size;
  }
}
// @each nhiều giá trị
$val: (normal, bold, 10px), (emphasis, bold, 15px);
@each $name, $style, $size in $val {
  .#{$name} {
    font-weight: $style;
    font-size: $size;
  }
}
// ==> Ta thấy giá trị của $val giống như mảng 2 chiều, các giá trị $name, $style, $size sẽ tương ứng với 1 nhóm giá trị của $val

// @each với giá trị dạng map
$val: (default: normal, emphasis: bold);
@each $name, $style in $val {
  .#{$name} {
    font-weight: $style;
  }
}

/**
 * SCSS @import: cung cấp 1 quy tắc @import thông qua quá trình biên dịch, không như @import của CSS yêu cầu request HTTP từ trình duyệt
 * Việc import SCSS sẽ đồng thời kết hợp các công thức nhận được để biên dịch thành file CSS
 * Việc import SCSS tuân thủ một số quy tắc:
 * - File import sẽ có dạng dấu gạch dưới ở trước tên file: _name.scss
 * - Nội dung import chỉ chứa name mà không có dấu gạch _ và định dạng file .scss
 */
@import 'reset', 'base';
.list {
  color: red;
  li {
    font-size: 14px;
  }
}
/**
 * SCSS @import nhiều file
 */
